// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hbase

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type VmMoney struct {
	Id         int32  `thrift:"id,1"`
	InnerCode  string `thrift:"innerCode,2"`
	NodeId     int32  `thrift:"nodeId,3"`
	NodeName   string `thrift:"nodeName,4"`
	Dts        string `thrift:"dts,5"`
	DataType   int32  `thrift:"dataType,6"`
	DeleteMark int32  `thrift:"deleteMark,7"`
	Money      int32  `thrift:"money,8"`
	PayType    int32  `thrift:"payType,9"`
	Serial     string `thrift:"serial,10"`
	TraSeq     string `thrift:"traSeq,11"`
	Ts         string `thrift:"ts,12"`
}

func NewVmMoney() *VmMoney {
	return &VmMoney{}
}

func (p *VmMoney) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VmMoney) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *VmMoney) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.InnerCode = v
	}
	return nil
}

func (p *VmMoney) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.NodeId = v
	}
	return nil
}

func (p *VmMoney) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.NodeName = v
	}
	return nil
}

func (p *VmMoney) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Dts = v
	}
	return nil
}

func (p *VmMoney) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.DataType = v
	}
	return nil
}

func (p *VmMoney) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.DeleteMark = v
	}
	return nil
}

func (p *VmMoney) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Money = v
	}
	return nil
}

func (p *VmMoney) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.PayType = v
	}
	return nil
}

func (p *VmMoney) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.Serial = v
	}
	return nil
}

func (p *VmMoney) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.TraSeq = v
	}
	return nil
}

func (p *VmMoney) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.Ts = v
	}
	return nil
}

func (p *VmMoney) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VmMoney"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *VmMoney) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("innerCode", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:innerCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InnerCode)); err != nil {
		return fmt.Errorf("%T.innerCode (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:innerCode: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nodeId", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:nodeId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NodeId)); err != nil {
		return fmt.Errorf("%T.nodeId (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:nodeId: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nodeName", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:nodeName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NodeName)); err != nil {
		return fmt.Errorf("%T.nodeName (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:nodeName: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dts", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:dts: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dts)); err != nil {
		return fmt.Errorf("%T.dts (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:dts: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataType", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:dataType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DataType)); err != nil {
		return fmt.Errorf("%T.dataType (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:dataType: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteMark", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:deleteMark: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.DeleteMark)); err != nil {
		return fmt.Errorf("%T.deleteMark (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:deleteMark: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:money: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Money)); err != nil {
		return fmt.Errorf("%T.money (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:money: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payType", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:payType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PayType)); err != nil {
		return fmt.Errorf("%T.payType (9) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:payType: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serial", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:serial: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Serial)); err != nil {
		return fmt.Errorf("%T.serial (10) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:serial: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("traSeq", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:traSeq: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TraSeq)); err != nil {
		return fmt.Errorf("%T.traSeq (11) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:traSeq: %s", p, err)
	}
	return err
}

func (p *VmMoney) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ts", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:ts: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ts)); err != nil {
		return fmt.Errorf("%T.ts (12) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:ts: %s", p, err)
	}
	return err
}

func (p *VmMoney) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VmMoney(%+v)", *p)
}

type QueryResult struct {
	QueryTime    int32      `thrift:"queryTime,1"`
	ResponseTime int32      `thrift:"responseTime,2"`
	Count        int32      `thrift:"count,3"`
	LastRow      string     `thrift:"lastRow,4"`
	VmMoneyList  []*VmMoney `thrift:"vmMoneyList,5"`
}

func NewQueryResult() *QueryResult {
	return &QueryResult{}
}

func (p *QueryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *QueryResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.QueryTime = v
	}
	return nil
}

func (p *QueryResult) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ResponseTime = v
	}
	return nil
}

func (p *QueryResult) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Count = v
	}
	return nil
}

func (p *QueryResult) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.LastRow = v
	}
	return nil
}

func (p *QueryResult) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.VmMoneyList = make([]*VmMoney, 0, size)
	for i := 0; i < size; i++ {
		_elem0 := NewVmMoney()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.VmMoneyList = append(p.VmMoneyList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *QueryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *QueryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("queryTime", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:queryTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.QueryTime)); err != nil {
		return fmt.Errorf("%T.queryTime (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:queryTime: %s", p, err)
	}
	return err
}

func (p *QueryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("responseTime", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:responseTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ResponseTime)); err != nil {
		return fmt.Errorf("%T.responseTime (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:responseTime: %s", p, err)
	}
	return err
}

func (p *QueryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:count: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return fmt.Errorf("%T.count (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:count: %s", p, err)
	}
	return err
}

func (p *QueryResult) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastRow", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:lastRow: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LastRow)); err != nil {
		return fmt.Errorf("%T.lastRow (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:lastRow: %s", p, err)
	}
	return err
}

func (p *QueryResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.VmMoneyList != nil {
		if err := oprot.WriteFieldBegin("vmMoneyList", thrift.LIST, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:vmMoneyList: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VmMoneyList)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.VmMoneyList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:vmMoneyList: %s", p, err)
		}
	}
	return err
}

func (p *QueryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryResult(%+v)", *p)
}

type UException struct {
	ErrorCode    int32  `thrift:"errorCode,1"`
	ErrorMessage string `thrift:"errorMessage,2"`
}

func NewUException() *UException {
	return &UException{}
}

func (p *UException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *UException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ErrorMessage = v
	}
	return nil
}

func (p *UException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return fmt.Errorf("%T.errorCode (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
	}
	return err
}

func (p *UException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorMessage", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:errorMessage: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorMessage)); err != nil {
		return fmt.Errorf("%T.errorMessage (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:errorMessage: %s", p, err)
	}
	return err
}

func (p *UException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UException(%+v)", *p)
}
