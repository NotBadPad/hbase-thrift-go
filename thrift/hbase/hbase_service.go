// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hbase

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

type HbaseService interface {
	// 查询制定范围的记录数
	//
	// Parameters:
	//  - Key
	//  - From
	//  - To
	//  - Qtype
	//  - LastKey
	GetQueryCount(key string, from string, to string, qtype int32, lastKey string) (r *QueryResult, ex *UException, err error)
	// 查询组织下指定时间段记录
	//
	// Parameters:
	//  - OrgId
	//  - From
	//  - To
	//  - LastKey
	//  - PageCount
	GetVmMoneyByOrg(orgId string, from string, to string, lastKey string, pageCount int32) (r *QueryResult, err error)
	// 查询售货机下指定时间段记录
	//
	// Parameters:
	//  - VmCode
	//  - From
	//  - To
	//  - LastKey
	//  - PageCount
	GetVmMoneyByVm(vmCode string, from string, to string, lastKey string, pageCount int32) (r *QueryResult, err error)
}

type HbaseServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewHbaseServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HbaseServiceClient {
	return &HbaseServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewHbaseServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HbaseServiceClient {
	return &HbaseServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// 查询制定范围的记录数
//
// Parameters:
//  - Key
//  - From
//  - To
//  - Qtype
//  - LastKey
func (p *HbaseServiceClient) GetQueryCount(key string, from string, to string, qtype int32, lastKey string) (r *QueryResult, ex *UException, err error) {
	if err = p.sendGetQueryCount(key, from, to, qtype, lastKey); err != nil {
		return
	}
	return p.recvGetQueryCount()
}

func (p *HbaseServiceClient) sendGetQueryCount(key string, from string, to string, qtype int32, lastKey string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getQueryCount", thrift.CALL, p.SeqId)
	args1 := NewGetQueryCountArgs()
	args1.Key = key
	args1.From = from
	args1.To = to
	args1.Qtype = qtype
	args1.LastKey = lastKey
	err = args1.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *HbaseServiceClient) recvGetQueryCount() (value *QueryResult, ex *UException, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		error4, err = error3.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error4
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result2 := NewGetQueryCountResult()
	err = result2.Read(iprot)
	iprot.ReadMessageEnd()
	value = result2.Success
	if result2.Ex != nil {
		ex = result2.Ex
	}
	return
}

// 查询组织下指定时间段记录
//
// Parameters:
//  - OrgId
//  - From
//  - To
//  - LastKey
//  - PageCount
func (p *HbaseServiceClient) GetVmMoneyByOrg(orgId string, from string, to string, lastKey string, pageCount int32) (r *QueryResult, err error) {
	if err = p.sendGetVmMoneyByOrg(orgId, from, to, lastKey, pageCount); err != nil {
		return
	}
	return p.recvGetVmMoneyByOrg()
}

func (p *HbaseServiceClient) sendGetVmMoneyByOrg(orgId string, from string, to string, lastKey string, pageCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getVmMoneyByOrg", thrift.CALL, p.SeqId)
	args5 := NewGetVmMoneyByOrgArgs()
	args5.OrgId = orgId
	args5.From = from
	args5.To = to
	args5.LastKey = lastKey
	args5.PageCount = pageCount
	err = args5.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *HbaseServiceClient) recvGetVmMoneyByOrg() (value *QueryResult, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error8 error
		error8, err = error7.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error8
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result6 := NewGetVmMoneyByOrgResult()
	err = result6.Read(iprot)
	iprot.ReadMessageEnd()
	value = result6.Success
	return
}

// 查询售货机下指定时间段记录
//
// Parameters:
//  - VmCode
//  - From
//  - To
//  - LastKey
//  - PageCount
func (p *HbaseServiceClient) GetVmMoneyByVm(vmCode string, from string, to string, lastKey string, pageCount int32) (r *QueryResult, err error) {
	if err = p.sendGetVmMoneyByVm(vmCode, from, to, lastKey, pageCount); err != nil {
		return
	}
	return p.recvGetVmMoneyByVm()
}

func (p *HbaseServiceClient) sendGetVmMoneyByVm(vmCode string, from string, to string, lastKey string, pageCount int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getVmMoneyByVm", thrift.CALL, p.SeqId)
	args9 := NewGetVmMoneyByVmArgs()
	args9.VmCode = vmCode
	args9.From = from
	args9.To = to
	args9.LastKey = lastKey
	args9.PageCount = pageCount
	err = args9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *HbaseServiceClient) recvGetVmMoneyByVm() (value *QueryResult, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result10 := NewGetVmMoneyByVmResult()
	err = result10.Read(iprot)
	iprot.ReadMessageEnd()
	value = result10.Success
	return
}

type HbaseServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HbaseService
}

func (p *HbaseServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HbaseServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HbaseServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHbaseServiceProcessor(handler HbaseService) *HbaseServiceProcessor {

	self13 := &HbaseServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self13.processorMap["getQueryCount"] = &hbaseServiceProcessorGetQueryCount{handler: handler}
	self13.processorMap["getVmMoneyByOrg"] = &hbaseServiceProcessorGetVmMoneyByOrg{handler: handler}
	self13.processorMap["getVmMoneyByVm"] = &hbaseServiceProcessorGetVmMoneyByVm{handler: handler}
	return self13
}

func (p *HbaseServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x14 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x14.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x14

}

type hbaseServiceProcessorGetQueryCount struct {
	handler HbaseService
}

func (p *hbaseServiceProcessorGetQueryCount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetQueryCountArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getQueryCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetQueryCountResult()
	if result.Success, result.Ex, err = p.handler.GetQueryCount(args.Key, args.From, args.To, args.Qtype, args.LastKey); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueryCount: "+err.Error())
		oprot.WriteMessageBegin("getQueryCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getQueryCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseServiceProcessorGetVmMoneyByOrg struct {
	handler HbaseService
}

func (p *hbaseServiceProcessorGetVmMoneyByOrg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetVmMoneyByOrgArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVmMoneyByOrg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetVmMoneyByOrgResult()
	if result.Success, err = p.handler.GetVmMoneyByOrg(args.OrgId, args.From, args.To, args.LastKey, args.PageCount); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVmMoneyByOrg: "+err.Error())
		oprot.WriteMessageBegin("getVmMoneyByOrg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getVmMoneyByOrg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseServiceProcessorGetVmMoneyByVm struct {
	handler HbaseService
}

func (p *hbaseServiceProcessorGetVmMoneyByVm) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetVmMoneyByVmArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVmMoneyByVm", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetVmMoneyByVmResult()
	if result.Success, err = p.handler.GetVmMoneyByVm(args.VmCode, args.From, args.To, args.LastKey, args.PageCount); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVmMoneyByVm: "+err.Error())
		oprot.WriteMessageBegin("getVmMoneyByVm", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getVmMoneyByVm", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type GetQueryCountArgs struct {
	Key     string `thrift:"key,1"`
	From    string `thrift:"from,2"`
	To      string `thrift:"to,3"`
	Qtype   int32  `thrift:"qtype,4"`
	LastKey string `thrift:"lastKey,5"`
}

func NewGetQueryCountArgs() *GetQueryCountArgs {
	return &GetQueryCountArgs{}
}

func (p *GetQueryCountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueryCountArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Key = v
	}
	return nil
}

func (p *GetQueryCountArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.From = v
	}
	return nil
}

func (p *GetQueryCountArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.To = v
	}
	return nil
}

func (p *GetQueryCountArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Qtype = v
	}
	return nil
}

func (p *GetQueryCountArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.LastKey = v
	}
	return nil
}

func (p *GetQueryCountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueryCount_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueryCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:key: %s", p, err)
	}
	return err
}

func (p *GetQueryCountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:from: %s", p, err)
	}
	if err := oprot.WriteString(string(p.From)); err != nil {
		return fmt.Errorf("%T.from (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:from: %s", p, err)
	}
	return err
}

func (p *GetQueryCountArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:to: %s", p, err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return fmt.Errorf("%T.to (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:to: %s", p, err)
	}
	return err
}

func (p *GetQueryCountArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qtype", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:qtype: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Qtype)); err != nil {
		return fmt.Errorf("%T.qtype (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:qtype: %s", p, err)
	}
	return err
}

func (p *GetQueryCountArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastKey", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:lastKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LastKey)); err != nil {
		return fmt.Errorf("%T.lastKey (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:lastKey: %s", p, err)
	}
	return err
}

func (p *GetQueryCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueryCountArgs(%+v)", *p)
}

type GetQueryCountResult struct {
	Success *QueryResult `thrift:"success,0"`
	Ex      *UException  `thrift:"ex,1"`
}

func NewGetQueryCountResult() *GetQueryCountResult {
	return &GetQueryCountResult{}
}

func (p *GetQueryCountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetQueryCountResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewQueryResult()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetQueryCountResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = NewUException()
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex)
	}
	return nil
}

func (p *GetQueryCountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getQueryCount_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	case p.Ex != nil:
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetQueryCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetQueryCountResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Ex != nil {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetQueryCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetQueryCountResult(%+v)", *p)
}

type GetVmMoneyByOrgArgs struct {
	OrgId string `thrift:"orgId,1"`
	From  string `thrift:"from,2"`
	To    string `thrift:"to,3"`
	// unused field # 4
	LastKey   string `thrift:"lastKey,5"`
	PageCount int32  `thrift:"pageCount,6"`
}

func NewGetVmMoneyByOrgArgs() *GetVmMoneyByOrgArgs {
	return &GetVmMoneyByOrgArgs{}
}

func (p *GetVmMoneyByOrgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetVmMoneyByOrgArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.OrgId = v
	}
	return nil
}

func (p *GetVmMoneyByOrgArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.From = v
	}
	return nil
}

func (p *GetVmMoneyByOrgArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.To = v
	}
	return nil
}

func (p *GetVmMoneyByOrgArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.LastKey = v
	}
	return nil
}

func (p *GetVmMoneyByOrgArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.PageCount = v
	}
	return nil
}

func (p *GetVmMoneyByOrgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVmMoneyByOrg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetVmMoneyByOrgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orgId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:orgId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OrgId)); err != nil {
		return fmt.Errorf("%T.orgId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:orgId: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByOrgArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:from: %s", p, err)
	}
	if err := oprot.WriteString(string(p.From)); err != nil {
		return fmt.Errorf("%T.from (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:from: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByOrgArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:to: %s", p, err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return fmt.Errorf("%T.to (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:to: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByOrgArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastKey", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:lastKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LastKey)); err != nil {
		return fmt.Errorf("%T.lastKey (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:lastKey: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByOrgArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageCount", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:pageCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PageCount)); err != nil {
		return fmt.Errorf("%T.pageCount (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:pageCount: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByOrgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVmMoneyByOrgArgs(%+v)", *p)
}

type GetVmMoneyByOrgResult struct {
	Success *QueryResult `thrift:"success,0"`
}

func NewGetVmMoneyByOrgResult() *GetVmMoneyByOrgResult {
	return &GetVmMoneyByOrgResult{}
}

func (p *GetVmMoneyByOrgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetVmMoneyByOrgResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewQueryResult()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetVmMoneyByOrgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVmMoneyByOrg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetVmMoneyByOrgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetVmMoneyByOrgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVmMoneyByOrgResult(%+v)", *p)
}

type GetVmMoneyByVmArgs struct {
	VmCode string `thrift:"vmCode,1"`
	From   string `thrift:"from,2"`
	To     string `thrift:"to,3"`
	// unused field # 4
	LastKey   string `thrift:"lastKey,5"`
	PageCount int32  `thrift:"pageCount,6"`
}

func NewGetVmMoneyByVmArgs() *GetVmMoneyByVmArgs {
	return &GetVmMoneyByVmArgs{}
}

func (p *GetVmMoneyByVmArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetVmMoneyByVmArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.VmCode = v
	}
	return nil
}

func (p *GetVmMoneyByVmArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.From = v
	}
	return nil
}

func (p *GetVmMoneyByVmArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.To = v
	}
	return nil
}

func (p *GetVmMoneyByVmArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.LastKey = v
	}
	return nil
}

func (p *GetVmMoneyByVmArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.PageCount = v
	}
	return nil
}

func (p *GetVmMoneyByVmArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVmMoneyByVm_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetVmMoneyByVmArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vmCode", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:vmCode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.VmCode)); err != nil {
		return fmt.Errorf("%T.vmCode (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:vmCode: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByVmArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:from: %s", p, err)
	}
	if err := oprot.WriteString(string(p.From)); err != nil {
		return fmt.Errorf("%T.from (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:from: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByVmArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:to: %s", p, err)
	}
	if err := oprot.WriteString(string(p.To)); err != nil {
		return fmt.Errorf("%T.to (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:to: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByVmArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastKey", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:lastKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LastKey)); err != nil {
		return fmt.Errorf("%T.lastKey (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:lastKey: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByVmArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageCount", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:pageCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PageCount)); err != nil {
		return fmt.Errorf("%T.pageCount (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:pageCount: %s", p, err)
	}
	return err
}

func (p *GetVmMoneyByVmArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVmMoneyByVmArgs(%+v)", *p)
}

type GetVmMoneyByVmResult struct {
	Success *QueryResult `thrift:"success,0"`
}

func NewGetVmMoneyByVmResult() *GetVmMoneyByVmResult {
	return &GetVmMoneyByVmResult{}
}

func (p *GetVmMoneyByVmResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetVmMoneyByVmResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewQueryResult()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *GetVmMoneyByVmResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVmMoneyByVm_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetVmMoneyByVmResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetVmMoneyByVmResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVmMoneyByVmResult(%+v)", *p)
}
